#!/usr/bin/env python3
#
#    Terminator - multiple gnome terminals in one window
#    Copyright (C) 2006-2010  cmsj@tenshu.net
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2 only.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
#    USA

"""Terminator by Chris Jones <cmsj@tenshu.net>"""

import sys
import os

try:
    ORIGCWD = os.getcwd()
except OSError:
    ORIGCWD = os.path.expanduser("~")

def _ensure_gtk4_and_vte():
    # Check we have Gtk 4 + VTE (GTK4) introspection and a valid display
    try:
        import gi
        gi.require_version('Gtk', '4.0')
        gi.require_version('Vte', '3.91')
        from gi.repository import Gtk, Gdk
    except Exception as ex:
        print('GTK 4 and VTE 3.91 GI are required to run Terminator (GTK4).')
        print('Error: %s' % ex)
        sys.exit(1)

    if Gdk.Display.get_default() is None:
        print('A graphical environment is required. Ensure $DISPLAY or Wayland is available.')
        sys.exit(1)


if __name__ == '__main__':
    _ensure_gtk4_and_vte()

    # Parse legacy Terminator options to avoid Gio.Application rejecting them.
    # This updates global config state, debug flags, etc.
    try:
        import terminatorlib.optionparse as optionparse
        options, dbus_options = optionparse.parse_options()
        # TODO: integrate options into the GTK4 app as features port over.
    except Exception:
        options = None

    # Defer to the new GTK4 application implementation
    try:
        from terminatorlib.gtk4app import TerminatorGtk4App
    except Exception as ex:
        print('Failed to initialize GTK4 application: %s' % ex)
        sys.exit(1)

    app = TerminatorGtk4App()
    try:
        # Pass only argv[0] to avoid Gio option parsing errors for legacy flags
        sys.exit(app.run([sys.argv[0]]))
    except KeyboardInterrupt:
        sys.exit(0)
